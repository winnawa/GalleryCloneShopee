{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { OperationData } from \"./OperationData.js\";\n\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n\n  function SubscriptionData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n\n    _this.initialize(options);\n\n    return _this;\n  }\n\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    var currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  };\n\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n\n  SubscriptionData.prototype.completeSubscription = function () {\n    var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return SubscriptionData;\n}(OperationData);\n\nexport { SubscriptionData };","map":{"version":3,"mappings":";AAAA,SAASA,KAAT,QAAsB,eAAtB;AAEA,SAASC,aAAT,QAA8B,oBAA9B;;AAOA;EAGUC;;EAIR,0BAAYC,EAAZ,EAQC;QAPCC,OAAO;QACPC,OAAO;QACPC,SAAS;;IAHX,YASEC,kBAAMH,OAAN,EAAeC,OAAf,KAAuB,IATzB;;IAFQG,0BAAmD,EAAnD;IAYNA,KAAI,CAACF,SAAL,GAAiBA,SAAjB;;IACAE,KAAI,CAACC,UAAL,CAAgBL,OAAhB;;;EACD;;EAEMM,qCAAP,UAAeC,MAAf,EAAgD;IAC9C,IAAI,KAAKC,UAAL,GAAkBC,IAAlB,KAA2B,IAA/B,EAAqC;MACnC,KAAKC,OAAL;MACA,OAAO;QACLC,OAAO,EAAE,KADJ;QAELC,KAAK,EAAEC,SAFF;QAGLC,IAAI,EAAED,SAHD;QAILE,SAAS,EAAE,KAAKP,UAAL,GAAkBO;MAJxB,CAAP;IAMD;;IAED,IAAIC,aAAa,GAAGT,MAApB;;IACA,IAAI,KAAKU,aAAL,GAAqBC,KAAzB,EAAgC;MAC9BF,aAAa,GAAG,KAAKG,gBAAL,EAAhB;IACD;;IAEK,qBAAiB,GAAK,KAAKX,UAAL,GAAiBY,iBAAvC;;IACN,IAAI,OAAOA,iBAAP,KAA6B,UAAjC,EAA6C;MAC3CA,iBAAiB,GAAG,CAAC,CAACA,iBAAiB,CAAC,KAAKZ,UAAL,EAAD,CAAvC;IACD;;IAED,IACEY,iBAAiB,KAAK,KAAtB,IACA,KAAKC,eADL,IAEAC,MAAM,CAACC,IAAP,CAAY,KAAKF,eAAjB,EAAkCG,MAAlC,GAA2C,CAF3C,KAGC,KAAKH,eAAL,CAAqBI,YAArB,KAAsC,KAAKjB,UAAL,GAAkBiB,YAAxD,IACC,CAAC7B,KAAK,CAAC,KAAKyB,eAAL,CAAqBN,SAAtB,EAAiC,KAAKP,UAAL,GAAkBO,SAAnD,CADP,IAEC,KAAKM,eAAL,CAAqBZ,IAArB,KAA8B,KAAKD,UAAL,GAAkBC,IALlD,CADF,EAOE;MACA,KAAKC,OAAL;MACAM,aAAa,GAAG,KAAKG,gBAAL,EAAhB;IACD;;IAED,KAAKd,UAAL,CAAgB,KAAKG,UAAL,EAAhB;IACA,KAAKkB,iBAAL;IAEA,KAAKL,eAAL,GAAuB,KAAKb,UAAL,EAAvB;IACA,6BAAYQ,aAAZ,GAAyB;MAAED,SAAS,EAAE,KAAKP,UAAL,GAAkBO;IAA/B,CAAzB;EACD,CAtCM;;EAwCAT,0CAAP;IACE,KAAKqB,SAAL,GAAiB,IAAjB;EACD,CAFM;;EAIArB,qCAAP;IACE,KAAKsB,eAAL;IACA,OAAO,KAAKC,iBAAL,CAAuBC,KAA9B;EACD,CAHM;;EAKCxB,wCAAR,UAAmBN,OAAnB,EAAsE;IACpE,IAAI,KAAK6B,iBAAL,CAAuBC,KAAvB,IAAgC,KAAKtB,UAAL,GAAkBC,IAAlB,KAA2B,IAA/D,EAAqE;IACrE,KAAKoB,iBAAL,CAAuBC,KAAvB,GAA+B,KAAKb,aAAL,GAAqBc,MAArB,CAA4BC,SAA5B,CAAsC;MACnEF,KAAK,EAAE9B,OAAO,CAACyB,YADoD;MAEnEV,SAAS,EAAEf,OAAO,CAACe,SAFgD;MAGnEkB,WAAW,EAAEjC,OAAO,CAACiC;IAH8C,CAAtC,CAA/B;EAKD,CAPO;;EASA3B,+CAAR;IACE,IAAI,KAAKuB,iBAAL,CAAuBJ,YAA3B,EAAyC;IACzC,KAAKI,iBAAL,CAAuBJ,YAAvB,GAAsC,KAAKI,iBAAL,CAAuBC,KAAvB,CAA8BE,SAA9B,CACpC;MACEE,IAAI,EAAE,KAAKC,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CADR;MAEExB,KAAK,EAAE,KAAKyB,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAFT;MAGEE,QAAQ,EAAE,KAAKC,oBAAL,CAA0BH,IAA1B,CAA+B,IAA/B;IAHZ,CADoC,CAAtC;EAOD,CATO;;EAWA9B,8CAAR;IACE,OAAO;MACLK,OAAO,EAAE,IADJ;MAELC,KAAK,EAAEC,SAFF;MAGLC,IAAI,EAAED;IAHD,CAAP;EAKD,CANO;;EAQAP,0CAAR,UAAqBC,MAArB,EAA+C;IAC7C,IAAI,KAAKoB,SAAT,EAAoB;MAClB,KAAKzB,SAAL,CAAeK,MAAf;IACD;EACF,CAJO;;EAMAD,+CAAR,UAA0BC,MAA1B,EAA2D;IACjD,sBAAkB,GAAK,KAAKC,UAAL,GAAiBgC,kBAAxC;IAER,KAAKC,YAAL,CAAkB;MAChB3B,IAAI,EAAEP,MAAM,CAACO,IADG;MAEhBH,OAAO,EAAE,KAFO;MAGhBC,KAAK,EAAEC;IAHS,CAAlB;;IAMA,IAAI2B,kBAAJ,EAAwB;MACtBA,kBAAkB,CAAC;QACjBT,MAAM,EAAE,KAAKd,aAAL,GAAqBc,MADZ;QAEjBW,gBAAgB,EAAEnC;MAFD,CAAD,CAAlB;IAID;EACF,CAfO;;EAiBAD,yCAAR,UAAoBM,KAApB,EAA8B;IAC5B,KAAK6B,YAAL,CAAkB;MAChB7B,KAAK,OADW;MAEhBD,OAAO,EAAE;IAFO,CAAlB;EAID,CALO;;EAOAL,kDAAR;IACU,0BAAsB,GAAK,KAAKE,UAAL,GAAiBmC,sBAA5C;IACR,IAAIA,sBAAJ,EAA4BA,sBAAsB;IAClD,KAAKf,eAAL;EACD,CAJO;;EAMAtB,6CAAR;IACE,IAAI,KAAKuB,iBAAL,CAAuBJ,YAA3B,EAAyC;MACvC,KAAKI,iBAAL,CAAuBJ,YAAvB,CAAoCmB,WAApC;MACA,OAAO,KAAKf,iBAAL,CAAuBJ,YAA9B;IACD;EACF,CALO;;EAMV;AAAC,CA5ID,CAGU5B,aAHV","names":["equal","OperationData","__extends","_a","options","context","setResult","_super","_this","initialize","SubscriptionData","result","getOptions","skip","cleanup","loading","error","undefined","data","variables","currentResult","refreshClient","isNew","getLoadingResult","shouldResubscribe","previousOptions","Object","keys","length","subscription","startSubscription","isMounted","endSubscription","currentObservable","query","client","subscribe","fetchPolicy","next","updateCurrentData","bind","updateError","complete","completeSubscription","onSubscriptionData","updateResult","subscriptionData","onSubscriptionComplete","unsubscribe"],"sourceRoot":"","sources":["../../../src/react/data/SubscriptionData.ts"],"sourcesContent":["import { equal } from '@wry/equality';\n\nimport { OperationData } from './OperationData';\nimport {\n  SubscriptionCurrentObservable,\n  SubscriptionDataOptions,\n  SubscriptionResult\n} from '../types/types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionDataOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionDataOptions<TData, TVariables>;\n    context: any;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    let currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !equal(this.previousOptions.variables, this.getOptions().variables) ||\n        this.previousOptions.skip !== this.getOptions().skip)\n    ) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n  }\n\n  public cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionDataOptions<TData, TVariables>) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    } as SubscriptionResult<TData>;\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    const { onSubscriptionComplete } = this.getOptions();\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}