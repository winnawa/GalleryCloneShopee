{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport function useReactiveVar(rv) {\n  var value = rv();\n  var mute = rv.onNextChange(useState(value)[1]);\n  useEffect(function () {\n    return mute;\n  }, []);\n  return value;\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAGA,OAAM,SAAUC,cAAV,CAA4BC,EAA5B,EAA8C;EAClD,IAAMC,KAAK,GAAGD,EAAE,EAAhB;EAGA,IAAME,IAAI,GAAGF,EAAE,CAACG,YAAH,CAAgBN,QAAQ,CAACI,KAAD,CAAR,CAAgB,CAAhB,CAAhB,CAAb;EAKAH,SAAS,CAAC;IAAM;EAAI,CAAX,EAAa,EAAb,CAAT;EACA,OAAOG,KAAP;AACD","names":["useState","useEffect","useReactiveVar","rv","value","mute","onNextChange"],"sourceRoot":"","sources":["../../../src/react/hooks/useReactiveVar.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { ReactiveVar } from '../../core';\n\nexport function useReactiveVar<T>(rv: ReactiveVar<T>): T {\n  const value = rv();\n  // We don't actually care what useState thinks the value of the variable\n  // is, so we take only the update function from the returned array.\n  const mute = rv.onNextChange(useState(value)[1]);\n  // Once the component is unmounted, ignore future updates. Note that the\n  // useEffect function returns the mute function without calling it,\n  // allowing it to be called when the component unmounts. This is\n  // equivalent to useEffect(() => () => mute(), []), but shorter.\n  useEffect(() => mute, []);\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}