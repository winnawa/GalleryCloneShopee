{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { DocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { OperationData } from \"./OperationData.js\";\nimport { mergeOptions } from \"../../core/index.js\";\n\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n\n  function MutationData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        result = _a.result,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n\n      _this.onMutationStart();\n\n      var mutationId = _this.generateNewMutationId();\n\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n\n        return response;\n      }).catch(function (error) {\n        _this.onMutationError(error, mutationId);\n\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [this.runMutation, __assign(__assign({}, result), {\n      client: this.refreshClient().client\n    })];\n  };\n\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n\n  MutationData.prototype.cleanup = function () {};\n\n  MutationData.prototype.mutate = function (options) {\n    return this.refreshClient().client.mutate(mergeOptions(this.getOptions(), options));\n  };\n\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n        onCompleted = _a.onCompleted,\n        ignoreResults = _a.ignoreResults;\n\n    var data = response.data,\n        errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n\n    var callOncomplete = function () {\n      return onCompleted ? onCompleted(data) : null;\n    };\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n\n    callOncomplete();\n  };\n\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  };\n\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n\n  return MutationData;\n}(OperationData);\n\nexport { MutationData };","map":{"version":3,"mappings":"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","names":["equal","DocumentType","ApolloError","OperationData","mergeOptions","__extends","_a","options","context","result","setResult","_super","_this","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","then","response","onMutationCompleted","catch","error","onMutationError","getOptions","onError","verifyDocumentType","mutation","Mutation","mostRecentMutationId","MutationData","isMounted","runMutation","client","refreshClient","unmount","bind","loading","ignoreResults","updateResult","undefined","data","called","onCompleted","errors","length","graphQLErrors","callOncomplete","isMostRecentMutation","previousResult"],"sourceRoot":"","sources":["../../../src/react/data/MutationData.ts"],"sourcesContent":["import { equal } from '@wry/equality';\n\nimport { DocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport {\n  MutationDataOptions,\n  MutationTuple,\n  MutationFunctionOptions,\n  MutationResult,\n} from '../types/types';\nimport { OperationData } from './OperationData';\nimport { OperationVariables, MutationOptions, mergeOptions } from '../../core';\nimport { FetchResult } from '../../link/core';\n\ntype MutationResultWithoutClient<TData = any> = Omit<MutationResult<TData>, 'client'>;\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables\n> extends OperationData {\n  private mostRecentMutationId: number;\n  private result: MutationResultWithoutClient<TData>;\n  private previousResult?: MutationResultWithoutClient<TData>;\n  private setResult: (result: MutationResultWithoutClient<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationDataOptions<TData, TVariables>;\n    context: any;\n    result: MutationResultWithoutClient<TData>;\n    setResult: (result: MutationResultWithoutClient<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResultWithoutClient<TData>): MutationTuple<TData, TVariables> {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [\n      this.runMutation,\n      { ...result, client: this.refreshClient().client }\n    ] as MutationTuple<TData, TVariables>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables\n    > = {} as MutationFunctionOptions<TData, TVariables>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: FetchResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        this.onMutationError(error, mutationId);\n        if (!this.getOptions().onError) throw error;\n      });\n  };\n\n  private mutate(\n    options: MutationFunctionOptions<TData, TVariables>\n  ) {\n    return this.refreshClient().client.mutate(\n      mergeOptions(\n        this.getOptions(),\n        options as MutationOptions<TData, TVariables>,\n      ),\n    );\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: FetchResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    const { onError } = this.getOptions();\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResultWithoutClient<TData>) {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !equal(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}