{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { isNonEmptyArray } from \"../utilities/index.js\";\nexport function isApolloError(err) {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\nvar generateErrorMessage = function (err) {\n  var message = '';\n\n  if (isNonEmptyArray(err.graphQLErrors)) {\n    err.graphQLErrors.forEach(function (graphQLError) {\n      var errorMessage = graphQLError ? graphQLError.message : 'Error message not found.';\n      message += errorMessage + \"\\n\";\n    });\n  }\n\n  if (err.networkError) {\n    message += err.networkError.message + \"\\n\";\n  }\n\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nvar ApolloError = function (_super) {\n  __extends(ApolloError, _super);\n\n  function ApolloError(_a) {\n    var graphQLErrors = _a.graphQLErrors,\n        networkError = _a.networkError,\n        errorMessage = _a.errorMessage,\n        extraInfo = _a.extraInfo;\n\n    var _this = _super.call(this, errorMessage) || this;\n\n    _this.graphQLErrors = graphQLErrors || [];\n    _this.networkError = networkError || null;\n    _this.message = errorMessage || generateErrorMessage(_this);\n    _this.extraInfo = extraInfo;\n    _this.__proto__ = ApolloError.prototype;\n    return _this;\n  }\n\n  return ApolloError;\n}(Error);\n\nexport { ApolloError };","map":{"version":3,"mappings":";AAEA,SAASA,eAAT,QAAgC,uBAAhC;AAIA,OAAM,SAAUC,aAAV,CAAwBC,GAAxB,EAAkC;EACtC,OAAOA,GAAG,CAACC,cAAJ,CAAmB,eAAnB,CAAP;AACD;;AAMD,IAAMC,oBAAoB,GAAG,UAACF,GAAD,EAAiB;EAC5C,IAAIG,OAAO,GAAG,EAAd;;EAEA,IAAIL,eAAe,CAACE,GAAG,CAACI,aAAL,CAAnB,EAAwC;IACtCJ,GAAG,CAACI,aAAJ,CAAkBC,OAAlB,CAA0B,UAACC,YAAD,EAA2B;MACnD,IAAMC,YAAY,GAAGD,YAAY,GAC7BA,YAAY,CAACH,OADgB,GAE7B,0BAFJ;MAGAA,OAAO,IAAOI,YAAY,OAA1B;IACD,CALD;EAMD;;EAED,IAAIP,GAAG,CAACQ,YAAR,EAAsB;IACpBL,OAAO,IAAOH,GAAG,CAACQ,YAAJ,CAAiBL,OAAjB,GAAwB,IAAtC;EACD;;EAGDA,OAAO,GAAGA,OAAO,CAACM,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAV;EACA,OAAON,OAAP;AACD,CAnBD;;AAqBA;EAAiCO;;EAa/B,qBAAYC,EAAZ,EAUC;QATCP,aAAa;QACbI,YAAY;QACZD,YAAY;QACZK,SAAS;;IAJX,YAWEC,kBAAMN,YAAN,KAAmB,IAXrB;;IAYEO,KAAI,CAACV,aAAL,GAAqBA,aAAa,IAAI,EAAtC;IACAU,KAAI,CAACN,YAAL,GAAoBA,YAAY,IAAI,IAApC;IACAM,KAAI,CAACX,OAAL,GAAeI,YAAY,IAAIL,oBAAoB,CAACY,KAAD,CAAnD;IACAA,KAAI,CAACF,SAAL,GAAiBA,SAAjB;IAICE,KAAY,CAACC,SAAb,GAAyBC,WAAW,CAACC,SAArC;;EACF;;EACH;AAAC,CAlCD,CAAiCC,KAAjC","names":["isNonEmptyArray","isApolloError","err","hasOwnProperty","generateErrorMessage","message","graphQLErrors","forEach","graphQLError","errorMessage","networkError","replace","__extends","_a","extraInfo","_super","_this","__proto__","ApolloError","prototype","Error"],"sourceRoot":"","sources":["../../src/errors/index.ts"],"sourcesContent":["import { GraphQLError } from 'graphql';\n\nimport { isNonEmptyArray } from '../utilities';\nimport { ServerParseError } from '../link/http';\nimport { ServerError } from '../link/utils';\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  let message = '';\n  // If we have GraphQL errors present, add that to the error message.\n  if (isNonEmptyArray(err.graphQLErrors)) {\n    err.graphQLErrors.forEach((graphQLError: GraphQLError) => {\n      const errorMessage = graphQLError\n        ? graphQLError.message\n        : 'Error message not found.';\n      message += `${errorMessage}\\n`;\n    });\n  }\n\n  if (err.networkError) {\n    message += `${err.networkError.message}\\n`;\n  }\n\n  // strip newline from the end of the message\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nexport class ApolloError extends Error {\n  public message: string;\n  public graphQLErrors: ReadonlyArray<GraphQLError>;\n  public networkError: Error | ServerParseError | ServerError | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: {\n    graphQLErrors?: ReadonlyArray<GraphQLError>;\n    networkError?: Error | ServerParseError | ServerError | null;\n    errorMessage?: string;\n    extraInfo?: any;\n  }) {\n    super(errorMessage);\n    this.graphQLErrors = graphQLErrors || [];\n    this.networkError = networkError || null;\n    this.message = errorMessage || generateErrorMessage(this);\n    this.extraInfo = extraInfo;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}