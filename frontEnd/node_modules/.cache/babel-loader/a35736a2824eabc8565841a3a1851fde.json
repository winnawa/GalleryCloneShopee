{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useContext, useState, useRef, useEffect } from 'react';\nimport { SubscriptionData } from \"../data/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nexport function useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n\n  var _a = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,MAA/B,EAAuCC,SAAvC,QAAwD,OAAxD;AAKA,SAASC,gBAAT,QAAiC,kBAAjC;AAEA,SAASC,gBAAT,QAAiC,qBAAjC;AAEA,OAAM,SAAUC,eAAV,CACJC,YADI,EAEJC,OAFI,EAEgD;EAEpD,IAAMC,OAAO,GAAGT,UAAU,CAACK,gBAAgB,EAAjB,CAA1B;EACA,IAAMK,cAAc,GAAGF,OAAO,GAC3BG,sBAAMH,OAAN,GAAa;IAAED,YAAY;EAAd,CAAb,CAD2B,GAE1B;IAAEA,YAAY;EAAd,CAFJ;;EAGM,SAAsBN,QAAQ,CAAC;IACnCW,OAAO,EAAE,CAACF,cAAc,CAACG,IADU;IAEnCC,KAAK,EAAEC,SAF4B;IAGnCC,IAAI,EAAED;EAH6B,CAAD,CAA9B;EAAA,IAACE,MAAM,QAAP;EAAA,IAASC,SAAS,QAAlB;;EAMN,IAAMC,mBAAmB,GAAGjB,MAAM,EAAlC;;EACA,SAASkB,sBAAT,GAA+B;IAC7B,IAAI,CAACD,mBAAmB,CAACE,OAAzB,EAAkC;MAChCF,mBAAmB,CAACE,OAApB,GAA8B,IAAIjB,gBAAJ,CAAwC;QACpEI,OAAO,EAAEE,cAD2D;QAEpED,OAAO,SAF6D;QAGpES,SAAS;MAH2D,CAAxC,CAA9B;IAKD;;IACD,OAAOC,mBAAmB,CAACE,OAA3B;EACD;;EAED,IAAMC,gBAAgB,GAAGF,sBAAsB,EAA/C;EACAE,gBAAgB,CAACC,UAAjB,CAA4Bb,cAA5B,EAA4C,IAA5C;EACAY,gBAAgB,CAACb,OAAjB,GAA2BA,OAA3B;EAEAN,SAAS,CAAC;IAAM,uBAAgB,CAACqB,YAAjB;EAA+B,CAAtC,CAAT;EACArB,SAAS,CAAC;IAAM,uBAAgB,CAACsB,OAAjB,CAAyBC,IAAzB,CAA8BJ,gBAA9B;EAA+C,CAAtD,EAAwD,EAAxD,CAAT;EAEA,OAAOA,gBAAgB,CAACK,OAAjB,CAAyBV,MAAzB,CAAP;AACD","names":["useContext","useState","useRef","useEffect","SubscriptionData","getApolloContext","useSubscription","subscription","options","context","updatedOptions","__assign","loading","skip","error","undefined","data","result","setResult","subscriptionDataRef","getSubscriptionDataRef","current","subscriptionData","setOptions","afterExecute","cleanup","bind","execute"],"sourceRoot":"","sources":["../../../src/react/hooks/useSubscription.ts"],"sourcesContent":["import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { SubscriptionHookOptions } from '../types/types';\nimport { SubscriptionData } from '../data';\nimport { OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const context = useContext(getApolloContext());\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n  const [result, setResult] = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  });\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  useEffect(() => subscriptionData.afterExecute());\n  useEffect(() => subscriptionData.cleanup.bind(subscriptionData), []);\n\n  return subscriptionData.execute(result);\n}\n"]},"metadata":{},"sourceType":"module"}