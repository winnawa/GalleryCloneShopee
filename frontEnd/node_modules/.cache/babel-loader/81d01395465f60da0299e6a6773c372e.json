{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nexport function getFragmentQueryDocument(document, fragmentName) {\n  var actualFragmentName = fragmentName;\n  var fragments = [];\n  document.definitions.forEach(function (definition) {\n    if (definition.kind === 'OperationDefinition') {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(42) : new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" + 'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n    }\n\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n\n  if (typeof actualFragmentName === 'undefined') {\n    process.env.NODE_ENV === \"production\" ? invariant(fragments.length === 1, 43) : invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  var query = __assign(__assign({}, document), {\n    definitions: __spreadArrays([{\n      kind: 'OperationDefinition',\n      operation: 'query',\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [{\n          kind: 'FragmentSpread',\n          name: {\n            kind: 'Name',\n            value: actualFragmentName\n          }\n        }]\n      }\n    }], document.definitions)\n  });\n\n  return query;\n}\nexport function createFragmentMap(fragments) {\n  if (fragments === void 0) {\n    fragments = [];\n  }\n\n  var symTable = {};\n  fragments.forEach(function (fragment) {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n  switch (selection.kind) {\n    case 'InlineFragment':\n      return selection;\n\n    case 'FragmentSpread':\n      {\n        var fragment = fragmentMap && fragmentMap[selection.name.value];\n        process.env.NODE_ENV === \"production\" ? invariant(fragment, 44) : invariant(fragment, \"No fragment named \" + selection.name.value + \".\");\n        return fragment;\n      }\n\n    default:\n      return null;\n  }\n}","map":{"version":3,"mappings":";AAMA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,cAA1C;AAwBA,OAAM,SAAUC,wBAAV,CACJC,QADI,EAEJC,YAFI,EAEiB;EAErB,IAAIC,kBAAkB,GAAGD,YAAzB;EAKA,IAAME,SAAS,GAAkC,EAAjD;EACAH,QAAQ,CAACI,WAAT,CAAqBC,OAArB,CAA6B,sBAAU;IAGrC,IAAIC,UAAU,CAACC,IAAX,KAAoB,qBAAxB,EAA+C;MAC7C,MAAMC,OAAI,IAAJ,CAAIC,QAAJ,KACJ,YADI,GACO,IAAWX,cAAX,CAAoB,EAApB,CADP,GAC2B,mBAClB,aAAOQ,UAAW,UAAlB,GAAkC,YAAlC,IAA+CA,UACxD,KADwD,GACxD,wCADwD,GACxD,EADS,IACT,IADS,GAEX,yFAH6B,CADjC;IAMD;;IAGD,IAAIA,UAAU,CAACC,IAAX,KAAoB,oBAAxB,EAA8C;MAC5CJ,SAAS,CAACO,IAAV,CAAeJ,UAAf;IACD;EACF,CAhBD;;EAoBA,IAAI,OAAOJ,kBAAP,KAA8B,WAAlC,EAA+C;IAC7CM,YACEC,QADF,KACY,YADZ,GAEEZ,SACE,UAAU,OAAV,KAAgB,CAAhB,EAAgB,EAAhB,CAHJ,GAGoBA,oJAHpB;IAMAK,kBAAkB,GAAGC,SAAS,CAAC,CAAD,CAAT,CAAaQ,IAAb,CAAkBC,KAAvC;EACD;;EAID,IAAMC,KAAK,yBACNb,QADM,GACE;IACXI,WAAW,kBACT;MACEG,IAAI,EAAE,qBADR;MAEEO,SAAS,EAAE,OAFb;MAGEC,YAAY,EAAE;QACZR,IAAI,EAAE,cADM;QAEZS,UAAU,EAAE,CACV;UACET,IAAI,EAAE,gBADR;UAEEI,IAAI,EAAE;YACJJ,IAAI,EAAE,MADF;YAEJK,KAAK,EAAEV;UAFH;QAFR,CADU;MAFA;IAHhB,CADS,GAiBNF,QAAQ,CAACI,WAjBH;EADA,CADF,CAAX;;EAuBA,OAAOS,KAAP;AACD;AAWD,OAAM,SAAUI,iBAAV,CACJd,SADI,EACoC;EAAxC;IAAAA;EAAwC;;EAExC,IAAMe,QAAQ,GAAgB,EAA9B;EACAf,SAAS,CAACE,OAAV,CAAkB,oBAAQ;IACxBa,QAAQ,CAACC,QAAQ,CAACR,IAAT,CAAcC,KAAf,CAAR,GAAgCO,QAAhC;EACD,CAFD;EAGA,OAAOD,QAAP;AACD;AAED,OAAM,SAAUE,wBAAV,CACJC,SADI,EAEJC,WAFI,EAEqB;EAEzB,QAAQD,SAAS,CAACd,IAAlB;IACE,KAAK,gBAAL;MACE,OAAOc,SAAP;;IACF,KAAK,gBAAL;MAAuB;QACrB,IAAMF,QAAQ,GAAGG,WAAW,IAAIA,WAAW,CAACD,SAAS,CAACV,IAAV,CAAeC,KAAhB,CAA3C;QACAJ,YAAUC,QAAV,KAAoB,YAApB,GAAoBZ,SAAqB,WAAe,EAAf,CAAzC,GAA6DA,SAAK,6DAAlE;QACA,OAAOsB,QAAP;MACD;;IACD;MACE,OAAO,IAAP;EATJ;AAWD","names":["invariant","InvariantError","getFragmentQueryDocument","document","fragmentName","actualFragmentName","fragments","definitions","forEach","definition","kind","process","NODE_ENV","push","name","value","query","operation","selectionSet","selections","createFragmentMap","symTable","fragment","getFragmentFromSelection","selection","fragmentMap"],"sourceRoot":"","sources":["../../../src/utilities/graphql/fragments.ts"],"sourcesContent":["import {\n  DocumentNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n  SelectionNode\n} from 'graphql';\nimport { invariant, InvariantError } from 'ts-invariant';\n\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(\n  document: DocumentNode,\n  fragmentName?: string,\n): DocumentNode {\n  let actualFragmentName = fragmentName;\n\n  // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n  const fragments: Array<FragmentDefinitionNode> = [];\n  document.definitions.forEach(definition => {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === 'OperationDefinition') {\n      throw new InvariantError(\n        `Found a ${definition.operation} operation${\n          definition.name ? ` named '${definition.name.value}'` : ''\n        }. ` +\n          'No operations are allowed when using a fragment as a query. Only fragments are allowed.',\n      );\n    }\n    // Add our definition to the fragments array if it is a fragment\n    // definition.\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n\n  // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n  if (typeof actualFragmentName === 'undefined') {\n    invariant(\n      fragments.length === 1,\n      `Found ${\n        fragments.length\n      } fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\n    );\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n  const query: DocumentNode = {\n    ...document,\n    definitions: [\n      {\n        kind: 'OperationDefinition',\n        operation: 'query',\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [\n            {\n              kind: 'FragmentSpread',\n              name: {\n                kind: 'Name',\n                value: actualFragmentName,\n              },\n            },\n          ],\n        },\n      },\n      ...document.definitions,\n    ],\n  };\n\n  return query;\n}\n\n/**\n * This is an interface that describes a map from fragment names to fragment definitions.\n */\nexport interface FragmentMap {\n  [fragmentName: string]: FragmentDefinitionNode;\n}\n\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(\n  fragments: FragmentDefinitionNode[] = [],\n): FragmentMap {\n  const symTable: FragmentMap = {};\n  fragments.forEach(fragment => {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\n\nexport function getFragmentFromSelection(\n  selection: SelectionNode,\n  fragmentMap?: FragmentMap,\n): InlineFragmentNode | FragmentDefinitionNode | null {\n  switch (selection.kind) {\n    case 'InlineFragment':\n      return selection;\n    case 'FragmentSpread': {\n      const fragment = fragmentMap && fragmentMap[selection.name.value];\n      invariant(fragment, `No fragment named ${selection.name.value}.`);\n      return fragment!;\n    }\n    default:\n      return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}