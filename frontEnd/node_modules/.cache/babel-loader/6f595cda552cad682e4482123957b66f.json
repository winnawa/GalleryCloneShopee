{"ast":null,"code":"import { Slot } from \"@wry/context\";\nimport { dep } from \"optimism\";\nvar varDep = dep();\nexport var cacheSlot = new Slot();\n\nfunction consumeAndIterate(set, callback) {\n  if (set.size) {\n    var items_1 = [];\n    set.forEach(function (item) {\n      return items_1.push(item);\n    });\n    set.clear();\n    items_1.forEach(callback);\n  }\n}\n\nvar varsByCache = new WeakMap();\nexport function forgetCache(cache) {\n  var vars = varsByCache.get(cache);\n\n  if (vars) {\n    consumeAndIterate(vars, function (rv) {\n      return rv.forgetCache(cache);\n    });\n    varsByCache.delete(cache);\n  }\n}\nexport function makeVar(value) {\n  var caches = new Set();\n  var listeners = new Set();\n\n  var rv = function (newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue;\n        varDep.dirty(rv);\n        caches.forEach(broadcast);\n        consumeAndIterate(listeners, function (listener) {\n          return listener(value);\n        });\n      }\n    } else {\n      var cache = cacheSlot.getValue();\n      if (cache) attach(cache);\n      varDep(rv);\n    }\n\n    return value;\n  };\n\n  rv.onNextChange = function (listener) {\n    listeners.add(listener);\n    return function () {\n      listeners.delete(listener);\n    };\n  };\n\n  var attach = rv.attachCache = function (cache) {\n    caches.add(cache);\n    var vars = varsByCache.get(cache);\n    if (!vars) varsByCache.set(cache, vars = new Set());\n    vars.add(rv);\n    return rv;\n  };\n\n  rv.forgetCache = function (cache) {\n    var deleted = caches.delete(cache);\n\n    if (deleted) {\n      var vars = varsByCache.get(cache);\n      if (vars) vars.delete(rv);\n    }\n\n    return deleted;\n  };\n\n  return rv;\n}\n\nfunction broadcast(cache) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}","map":{"version":3,"mappings":"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","names":["Slot","dep","varDep","cacheSlot","consumeAndIterate","set","callback","size","items_1","forEach","push","item","clear","varsByCache","WeakMap","forgetCache","cache","vars","get","delete","makeVar","value","caches","Set","listeners","rv","newValue","arguments","length","dirty","broadcast","getValue","attach","onNextChange","add","listener","attachCache","deleted","broadcastWatches"],"sourceRoot":"","sources":["../../../src/cache/inmemory/reactiveVars.ts"],"sourcesContent":["import { Slot } from \"@wry/context\";\nimport { dep } from \"optimism\";\nimport { InMemoryCache } from \"./inMemoryCache\";\nimport { ApolloCache } from '../../core';\n\nexport interface ReactiveVar<T> {\n  (newValue?: T): T;\n  onNextChange(listener: ReactiveListener<T>): () => void;\n  attachCache(cache: ApolloCache<any>): this;\n  forgetCache(cache: ApolloCache<any>): boolean;\n}\n\nexport type ReactiveListener<T> = (value: T) => any;\n\nconst varDep = dep<ReactiveVar<any>>();\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nexport const cacheSlot = new Slot<ApolloCache<any>>();\n\n// A listener function could in theory cause another listener to be added\n// to the set while we're iterating over it, so it's important to commit\n// to the original elements of the set before we begin iterating. See\n// iterateObserversSafely for another example of this pattern.\nfunction consumeAndIterate<T>(set: Set<T>, callback: (item: T) => any) {\n  if (set.size) {\n    const items: T[] = [];\n    set.forEach(item => items.push(item));\n    set.clear();\n    items.forEach(callback);\n  }\n}\n\nconst varsByCache = new WeakMap<ApolloCache<any>, Set<ReactiveVar<any>>>();\n\nexport function forgetCache(cache: ApolloCache<any>) {\n  const vars = varsByCache.get(cache);\n  if (vars) {\n    consumeAndIterate(vars, rv => rv.forgetCache(cache));\n    varsByCache.delete(cache);\n  }\n}\n\nexport function makeVar<T>(value: T): ReactiveVar<T> {\n  const caches = new Set<ApolloCache<any>>();\n  const listeners = new Set<ReactiveListener<T>>();\n\n  const rv: ReactiveVar<T> = function (newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue!;\n        // First, invalidate any fields with custom read functions that\n        // consumed this variable, so query results involving those fields\n        // will be recomputed the next time we read them.\n        varDep.dirty(rv);\n        // Next, broadcast changes to any caches that have previously read\n        // from this variable.\n        caches.forEach(broadcast);\n        // Finally, notify any listeners added via rv.onNextChange.\n        consumeAndIterate(listeners, listener => listener(value));\n      }\n    } else {\n      // When reading from the variable, obtain the current cache from\n      // context via cacheSlot. This isn't entirely foolproof, but it's\n      // the same system that powers varDep.\n      const cache = cacheSlot.getValue();\n      if (cache) attach(cache);\n      varDep(rv);\n    }\n\n    return value;\n  };\n\n  rv.onNextChange = listener => {\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n    };\n  };\n\n  const attach = rv.attachCache = cache => {\n    caches.add(cache);\n    let vars = varsByCache.get(cache)!;\n    if (!vars) varsByCache.set(cache, vars = new Set);\n    vars.add(rv);\n    return rv;\n  };\n\n  rv.forgetCache = cache => {\n    const deleted = caches.delete(cache);\n    if (deleted) {\n      const vars = varsByCache.get(cache);\n      if (vars) vars.delete(rv);\n    }\n    return deleted;\n  };\n\n  return rv;\n}\n\ntype Broadcastable = ApolloCache<any> & {\n  // This method is protected in InMemoryCache, which we are ignoring, but\n  // we still want some semblance of type safety when we call it.\n  broadcastWatches?: InMemoryCache[\"broadcastWatches\"];\n};\n\nfunction broadcast(cache: Broadcastable) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}