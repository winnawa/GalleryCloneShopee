{"ast":null,"code":"import { Observable } from \"./Observable.js\";\nexport function asyncMap(observable, mapFn, catchFn) {\n  return new Observable(function (observer) {\n    var next = observer.next,\n        error = observer.error,\n        complete = observer.complete;\n    var activeCallbackCount = 0;\n    var completed = false;\n\n    function makeCallback(examiner, delegate) {\n      if (examiner) {\n        return function (arg) {\n          ++activeCallbackCount;\n          new Promise(function (resolve) {\n            return resolve(examiner(arg));\n          }).then(function (result) {\n            --activeCallbackCount;\n            next && next.call(observer, result);\n\n            if (completed) {\n              handler.complete();\n            }\n          }, function (e) {\n            --activeCallbackCount;\n            error && error.call(observer, e);\n          });\n        };\n      } else {\n        return function (arg) {\n          return delegate && delegate.call(observer, arg);\n        };\n      }\n    }\n\n    var handler = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete: function () {\n        completed = true;\n\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      }\n    };\n    var sub = observable.subscribe(handler);\n    return function () {\n      return sub.unsubscribe();\n    };\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAAqC,iBAArC;AAIA,OAAM,SAAUC,QAAV,CACJC,UADI,EAEJC,KAFI,EAGJC,OAHI,EAGwC;EAE5C,OAAO,IAAIJ,UAAJ,CAAkB,oBAAQ;IACvB,QAAI,GAAsBK,QAAQ,KAAlC;IAAA,IAAMC,KAAK,GAAeD,QAAQ,MAAlC;IAAA,IAAaE,QAAQ,GAAKF,QAAQ,SAAlC;IACR,IAAIG,mBAAmB,GAAG,CAA1B;IACA,IAAIC,SAAS,GAAG,KAAhB;;IAEA,SAASC,YAAT,CACEC,QADF,EAEEC,QAFF,EAEsC;MAEpC,IAAID,QAAJ,EAAc;QACZ,OAAO,eAAG;UACR,EAAEH,mBAAF;UACA,IAAIK,OAAJ,CAAY,mBAAO;YAAI,cAAO,CAACF,QAAQ,CAACG,GAAD,CAAT,CAAP;UAAsB,CAA7C,EAA+CC,IAA/C,CACE,kBAAM;YACJ,EAAEP,mBAAF;YACAQ,IAAI,IAAIA,IAAI,CAACC,IAAL,CAAUZ,QAAV,EAAoBa,MAApB,CAAR;;YACA,IAAIT,SAAJ,EAAe;cACbU,OAAO,CAACZ,QAAR;YACD;UACF,CAPH,EAQE,aAAC;YACC,EAAEC,mBAAF;YACAF,KAAK,IAAIA,KAAK,CAACW,IAAN,CAAWZ,QAAX,EAAqBe,CAArB,CAAT;UACD,CAXH;QAaD,CAfD;MAgBD,CAjBD,MAiBO;QACL,OAAO,eAAG;UAAI,eAAQ,IAAIR,QAAQ,CAACK,IAAT,CAAcZ,QAAd,EAAwBS,GAAxB,CAAZ;QAAwC,CAAtD;MACD;IACF;;IAED,IAAMK,OAAO,GAAgB;MAC3BH,IAAI,EAAEN,YAAY,CAACP,KAAD,EAAQa,IAAR,CADS;MAE3BV,KAAK,EAAEI,YAAY,CAACN,OAAD,EAAUE,KAAV,CAFQ;MAG3BC,QAAQ;QACNE,SAAS,GAAG,IAAZ;;QACA,IAAI,CAACD,mBAAL,EAA0B;UACxBD,QAAQ,IAAIA,QAAQ,CAACU,IAAT,CAAcZ,QAAd,CAAZ;QACD;MACF;IAR0B,CAA7B;IAWA,IAAMgB,GAAG,GAAGnB,UAAU,CAACoB,SAAX,CAAqBH,OAArB,CAAZ;IACA,OAAO;MAAM,UAAG,CAACI,WAAJ;IAAiB,CAA9B;EACD,CA5CM,CAAP;AA6CD","names":["Observable","asyncMap","observable","mapFn","catchFn","observer","error","complete","activeCallbackCount","completed","makeCallback","examiner","delegate","Promise","arg","then","next","call","result","handler","e","sub","subscribe","unsubscribe"],"sourceRoot":"","sources":["../../../src/utilities/observables/asyncMap.ts"],"sourcesContent":["import { Observable, Observer } from \"./Observable\";\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | PromiseLike<R>,\n  catchFn?: (error: any) => R | PromiseLike<R>,\n): Observable<R> {\n  return new Observable<R>(observer => {\n    const { next, error, complete } = observer;\n    let activeCallbackCount = 0;\n    let completed = false;\n\n    function makeCallback(\n      examiner: typeof mapFn | typeof catchFn,\n      delegate: typeof next | typeof error,\n    ): (arg: any) => void {\n      if (examiner) {\n        return arg => {\n          ++activeCallbackCount;\n          new Promise(resolve => resolve(examiner(arg))).then(\n            result => {\n              --activeCallbackCount;\n              next && next.call(observer, result);\n              if (completed) {\n                handler.complete!();\n              }\n            },\n            e => {\n              --activeCallbackCount;\n              error && error.call(observer, e);\n            },\n          );\n        };\n      } else {\n        return arg => delegate && delegate.call(observer, arg);\n      }\n    }\n\n    const handler: Observer<V> = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete() {\n        completed = true;\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n"]},"metadata":{},"sourceType":"module"}