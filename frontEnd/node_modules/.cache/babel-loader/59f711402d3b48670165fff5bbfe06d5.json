{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { print } from 'graphql';\nvar defaultHttpOptions = {\n  includeQuery: true,\n  includeExtensions: false\n};\nvar defaultHeaders = {\n  accept: '*/*',\n  'content-type': 'application/json'\n};\nvar defaultOptions = {\n  method: 'POST'\n};\nexport var fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions\n};\nexport var selectHttpOptionsAndBody = function (operation, fallbackConfig) {\n  var configs = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    configs[_i - 2] = arguments[_i];\n  }\n\n  var options = __assign(__assign({}, fallbackConfig.options), {\n    headers: fallbackConfig.headers,\n    credentials: fallbackConfig.credentials\n  });\n\n  var http = fallbackConfig.http || {};\n  configs.forEach(function (config) {\n    options = __assign(__assign(__assign({}, options), config.options), {\n      headers: __assign(__assign({}, options.headers), config.headers)\n    });\n    if (config.credentials) options.credentials = config.credentials;\n    http = __assign(__assign({}, http), config.http);\n  });\n  var operationName = operation.operationName,\n      extensions = operation.extensions,\n      variables = operation.variables,\n      query = operation.query;\n  var body = {\n    operationName: operationName,\n    variables: variables\n  };\n  if (http.includeExtensions) body.extensions = extensions;\n  if (http.includeQuery) body.query = print(query);\n  return {\n    options: options,\n    body: body\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,KAAT,QAAsB,SAAtB;AAiFA,IAAMC,kBAAkB,GAAqB;EAC3CC,YAAY,EAAE,IAD6B;EAE3CC,iBAAiB,EAAE;AAFwB,CAA7C;AAKA,IAAMC,cAAc,GAAG;EAErBC,MAAM,EAAE,KAFa;EAGrB,gBAAgB;AAHK,CAAvB;AAMA,IAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE;AADa,CAAvB;AAIA,OAAO,IAAMC,kBAAkB,GAAG;EAChCC,IAAI,EAAER,kBAD0B;EAEhCS,OAAO,EAAEN,cAFuB;EAGhCO,OAAO,EAAEL;AAHuB,CAA3B;AAMP,OAAO,IAAMM,wBAAwB,GAAG,UACtCC,SADsC,EAEtCC,cAFsC,EAEZ;EAC1B;;OAAA,yCAA6B;IAA7BC;;;EAEA,IAAIJ,OAAO,yBACNG,cAAc,CAACH,OADT,GACgB;IACzBD,OAAO,EAAEI,cAAc,CAACJ,OADC;IAEzBM,WAAW,EAAEF,cAAc,CAACE;EAFH,CADhB,CAAX;;EAKA,IAAIP,IAAI,GAAqBK,cAAc,CAACL,IAAf,IAAuB,EAApD;EAMAM,OAAO,CAACE,OAAR,CAAgB,kBAAM;IACpBN,OAAO,kCACFA,OADE,GAEFO,MAAM,CAACP,OAFL,GAEY;MACjBD,OAAO,wBACFC,OAAO,CAACD,OADN,GAEFQ,MAAM,CAACR,OAFL;IADU,CAFZ,CAAP;IAQA,IAAIQ,MAAM,CAACF,WAAX,EAAwBL,OAAO,CAACK,WAAR,GAAsBE,MAAM,CAACF,WAA7B;IAExBP,IAAI,yBACCA,IADD,GAECS,MAAM,CAACT,IAFR,CAAJ;EAID,CAfD;EAkBQ,iBAAa,GAAmCI,SAAS,cAAzD;EAAA,IAAeM,UAAU,GAAuBN,SAAS,WAAzD;EAAA,IAA2BO,SAAS,GAAYP,SAAS,UAAzD;EAAA,IAAsCQ,KAAK,GAAKR,SAAS,MAAzD;EACR,IAAMS,IAAI,GAAS;IAAEC,aAAa,eAAf;IAAiBH,SAAS;EAA1B,CAAnB;EAEA,IAAIX,IAAI,CAACN,iBAAT,EAA6BmB,IAAY,CAACH,UAAb,GAA0BA,UAA1B;EAG7B,IAAIV,IAAI,CAACP,YAAT,EAAwBoB,IAAY,CAACD,KAAb,GAAqBrB,KAAK,CAACqB,KAAD,CAA1B;EAExB,OAAO;IACLV,OAAO,SADF;IAELW,IAAI;EAFC,CAAP;AAID,CA9CM","names":["print","defaultHttpOptions","includeQuery","includeExtensions","defaultHeaders","accept","defaultOptions","method","fallbackHttpConfig","http","headers","options","selectHttpOptionsAndBody","operation","fallbackConfig","configs","credentials","forEach","config","extensions","variables","query","body","operationName"],"sourceRoot":"","sources":["../../../src/link/http/selectHttpOptionsAndBody.ts"],"sourcesContent":["import { print } from 'graphql';\n\nimport { Operation } from '../core';\n\nexport interface UriFunction {\n  (operation: Operation): string;\n}\n\nexport interface Body {\n  query?: string;\n  operationName?: string;\n  variables?: Record<string, any>;\n  extensions?: Record<string, any>;\n}\n\nexport interface HttpOptions {\n  /**\n   * The URI to use when fetching operations.\n   *\n   * Defaults to '/graphql'.\n   */\n  uri?: string | UriFunction;\n\n  /**\n   * Passes the extensions field to your graphql server.\n   *\n   * Defaults to false.\n   */\n  includeExtensions?: boolean;\n\n  /**\n   * A `fetch`-compatible API to use when making requests.\n   */\n  fetch?: WindowOrWorkerGlobalScope['fetch'];\n\n  /**\n   * An object representing values to be sent as headers on the request.\n   */\n  headers?: any;\n\n  /**\n   * The credentials policy you want to use for the fetch call.\n   */\n  credentials?: string;\n\n  /**\n   * Any overrides of the fetch options argument to pass to the fetch call.\n   */\n  fetchOptions?: any;\n\n  /**\n   * If set to true, use the HTTP GET method for query operations. Mutations\n   * will still use the method specified in fetchOptions.method (which defaults\n   * to POST).\n   */\n  useGETForQueries?: boolean;\n\n  /**\n   * If set to true, the default behavior of stripping unused variables\n   * from the request will be disabled.\n   *\n   * Unused variables are likely to trigger server-side validation errors,\n   * per https://spec.graphql.org/draft/#sec-All-Variables-Used, but this\n   * includeUnusedVariables option can be useful if your server deviates\n   * from the GraphQL specification by not strictly enforcing that rule.\n   */\n  includeUnusedVariables?: boolean;\n}\n\nexport interface HttpQueryOptions {\n  includeQuery?: boolean;\n  includeExtensions?: boolean;\n}\n\nexport interface HttpConfig {\n  http?: HttpQueryOptions;\n  options?: any;\n  headers?: any;\n  credentials?: any;\n}\n\nconst defaultHttpOptions: HttpQueryOptions = {\n  includeQuery: true,\n  includeExtensions: false,\n};\n\nconst defaultHeaders = {\n  // headers are case insensitive (https://stackoverflow.com/a/5259004)\n  accept: '*/*',\n  'content-type': 'application/json',\n};\n\nconst defaultOptions = {\n  method: 'POST',\n};\n\nexport const fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions,\n};\n\nexport const selectHttpOptionsAndBody = (\n  operation: Operation,\n  fallbackConfig: HttpConfig,\n  ...configs: Array<HttpConfig>\n) => {\n  let options: HttpConfig & Record<string, any> = {\n    ...fallbackConfig.options,\n    headers: fallbackConfig.headers,\n    credentials: fallbackConfig.credentials,\n  };\n  let http: HttpQueryOptions = fallbackConfig.http || {};\n\n  /*\n   * use the rest of the configs to populate the options\n   * configs later in the list will overwrite earlier fields\n   */\n  configs.forEach(config => {\n    options = {\n      ...options,\n      ...config.options,\n      headers: {\n        ...options.headers,\n        ...config.headers,\n      },\n    };\n    if (config.credentials) options.credentials = config.credentials;\n\n    http = {\n      ...http,\n      ...config.http,\n    };\n  });\n\n  //The body depends on the http options\n  const { operationName, extensions, variables, query } = operation;\n  const body: Body = { operationName, variables };\n\n  if (http.includeExtensions) (body as any).extensions = extensions;\n\n  // not sending the query (i.e persisted queries)\n  if (http.includeQuery) (body as any).query = print(query);\n\n  return {\n    options,\n    body,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}