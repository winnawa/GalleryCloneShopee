{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function mergeDeep() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  return mergeDeepArray(sources);\n}\nexport function mergeDeepArray(sources) {\n  var target = sources[0] || {};\n  var count = sources.length;\n\n  if (count > 1) {\n    var merger = new DeepMerger();\n\n    for (var i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n\n  return target;\n}\n\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n}\n\nvar defaultReconciler = function (target, source, property) {\n  return this.merge(target[property], source[property]);\n};\n\nvar DeepMerger = function () {\n  function DeepMerger(reconciler) {\n    if (reconciler === void 0) {\n      reconciler = defaultReconciler;\n    }\n\n    this.reconciler = reconciler;\n    this.isObject = isObject;\n    this.pastCopies = new Set();\n  }\n\n  DeepMerger.prototype.merge = function (target, source) {\n    var _this = this;\n\n    var context = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      context[_i - 2] = arguments[_i];\n    }\n\n    if (isObject(source) && isObject(target)) {\n      Object.keys(source).forEach(function (sourceKey) {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          var targetValue = target[sourceKey];\n\n          if (source[sourceKey] !== targetValue) {\n            var result = _this.reconciler.apply(_this, __spreadArrays([target, source, sourceKey], context));\n\n            if (result !== targetValue) {\n              target = _this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          target = _this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n      return target;\n    }\n\n    return source;\n  };\n\n  DeepMerger.prototype.shallowCopyForMerge = function (value) {\n    if (isObject(value) && !this.pastCopies.has(value)) {\n      if (Array.isArray(value)) {\n        value = value.slice(0);\n      } else {\n        value = __assign({\n          __proto__: Object.getPrototypeOf(value)\n        }, value);\n      }\n\n      this.pastCopies.add(value);\n    }\n\n    return value;\n  };\n\n  return DeepMerger;\n}();\n\nexport { DeepMerger };","map":{"version":3,"mappings":"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","names":["Object","prototype","hasOwnProperty","mergeDeep","sources","mergeDeepArray","target","count","length","merger","DeepMerger","i","merge","isObject","obj","defaultReconciler","source","property","reconciler","Set","context","keys","forEach","call","sourceKey","targetValue","result","_this","apply","__spreadArrays","shallowCopyForMerge","value","pastCopies","has","Array","isArray","slice","__proto__","getPrototypeOf","add"],"sourceRoot":"","sources":["../../../src/utilities/common/mergeDeep.ts"],"sourcesContent":["const { hasOwnProperty } = Object.prototype;\n\n// These mergeDeep and mergeDeepArray utilities merge any number of objects\n// together, sharing as much memory as possible with the source objects, while\n// remaining careful to avoid modifying any source objects.\n\n// Logically, the return type of mergeDeep should be the intersection of\n// all the argument types. The binary call signature is by far the most\n// common, but we support 0- through 5-ary as well. After that, the\n// resulting type is just the inferred array element type. Note to nerds:\n// there is a more clever way of doing this that converts the tuple type\n// first to a union type (easy enough: T[number]) and then converts the\n// union to an intersection type using distributive conditional type\n// inference, but that approach has several fatal flaws (boolean becomes\n// true & false, and the inferred type ends up as unknown in many cases),\n// in addition to being nearly impossible to explain/understand.\nexport type TupleToIntersection<T extends any[]> =\n  T extends [infer A] ? A :\n  T extends [infer A, infer B] ? A & B :\n  T extends [infer A, infer B, infer C] ? A & B & C :\n  T extends [infer A, infer B, infer C, infer D] ? A & B & C & D :\n  T extends [infer A, infer B, infer C, infer D, infer E] ? A & B & C & D & E :\n  T extends (infer U)[] ? U : any;\n\nexport function mergeDeep<T extends any[]>(\n  ...sources: T\n): TupleToIntersection<T> {\n  return mergeDeepArray(sources);\n}\n\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nexport function mergeDeepArray<T>(sources: T[]): T {\n  let target = sources[0] || ({} as T);\n  const count = sources.length;\n  if (count > 1) {\n    const merger = new DeepMerger();\n    for (let i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n  return target;\n}\n\nfunction isObject(obj: any): obj is Record<string | number, any> {\n  return obj !== null && typeof obj === 'object';\n}\n\nexport type ReconcilerFunction<TContextArgs extends any[]> = (\n  this: DeepMerger<TContextArgs>,\n  target: Record<string | number, any>,\n  source: Record<string | number, any>,\n  property: string | number,\n  ...context: TContextArgs\n) => any;\n\nconst defaultReconciler: ReconcilerFunction<any[]> =\n  function (target, source, property) {\n    return this.merge(target[property], source[property]);\n  };\n\nexport class DeepMerger<TContextArgs extends any[]> {\n  constructor(\n    private reconciler: ReconcilerFunction<TContextArgs> = defaultReconciler,\n  ) {}\n\n  public merge(target: any, source: any, ...context: TContextArgs): any {\n    if (isObject(source) && isObject(target)) {\n      Object.keys(source).forEach(sourceKey => {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          const targetValue = target[sourceKey];\n          if (source[sourceKey] !== targetValue) {\n            const result = this.reconciler(target, source, sourceKey, ...context);\n            // A well-implemented reconciler may return targetValue to indicate\n            // the merge changed nothing about the structure of the target.\n            if (result !== targetValue) {\n              target = this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          // If there is no collision, the target can safely share memory with\n          // the source, and the recursion can terminate here.\n          target = this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n\n      return target;\n    }\n\n    // If source (or target) is not an object, let source replace target.\n    return source;\n  }\n\n  public isObject = isObject;\n\n  private pastCopies = new Set<any>();\n\n  public shallowCopyForMerge<T>(value: T): T {\n    if (isObject(value) && !this.pastCopies.has(value)) {\n      if (Array.isArray(value)) {\n        value = (value as any).slice(0);\n      } else {\n        value = {\n          __proto__: Object.getPrototypeOf(value),\n          ...value,\n        };\n      }\n      this.pastCopies.add(value);\n    }\n    return value;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}