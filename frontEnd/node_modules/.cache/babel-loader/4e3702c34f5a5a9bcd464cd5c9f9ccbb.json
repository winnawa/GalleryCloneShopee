{"ast":null,"code":"import { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport { parser, operationName } from \"../parser/index.js\";\n\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n    if (storePrevious === void 0) {\n      storePrevious = false;\n    }\n\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n\n    this.options = newOptions;\n  };\n\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 29) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 30) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n\n  return OperationData;\n}();\n\nexport { OperationData };","map":{"version":3,"mappings":"AACA,SAASA,KAAT,QAAsB,eAAtB;AACA,SAASC,SAAT,QAA0B,cAA1B;AAGA,SAAuBC,MAAvB,EAA+BC,aAA/B,QAAoD,oBAApD;;AAGA;EAUE,uBAAYC,OAAZ,EAA+CC,OAA/C,EAA4D;IATrD,iBAAqB,KAArB;IACA,uBAA2C,EAA3C;IAGA,eAAe,EAAf;IAGC,eAAmC,EAAnC;IAGN,KAAKD,OAAL,GAAeA,OAAO,IAAK,EAA3B;IACA,KAAKC,OAAL,GAAeA,OAAO,IAAI,EAA1B;EACD;;EAEMC,qCAAP;IACE,OAAO,KAAKF,OAAZ;EACD,CAFM;;EAIAE,qCAAP,UACEC,UADF,EAEEC,aAFF,EAEgC;IAA9B;MAAAA;IAA8B;;IAE9B,IAAIA,aAAa,IAAI,CAACR,KAAK,CAAC,KAAKI,OAAN,EAAeG,UAAf,CAA3B,EAAuD;MACrD,KAAKE,eAAL,GAAuB,KAAKL,OAA5B;IACD;;IACD,KAAKA,OAAL,GAAeG,UAAf;EACD,CARM;;EAcGD,kCAAV;IACE,KAAKI,SAAL,GAAiB,KAAjB;EACD,CAFS;;EAIAJ,wCAAV;IACE,IAAMK,MAAM,GACT,KAAKP,OAAL,IAAgB,KAAKA,OAAL,CAAaO,MAA9B,IACC,KAAKN,OAAL,IAAgB,KAAKA,OAAL,CAAaM,MAFhC;IAIAC,YACIC,QADJ,KAEE,YAFF,GAEEZ,uBAFF,GAEEA,2FACE,6DADF,GAEE,uCAFF,CAFF;IAOA,IAAIa,KAAK,GAAG,KAAZ;;IACA,IAAIH,MAAM,KAAK,KAAKA,MAApB,EAA4B;MAC1BG,KAAK,GAAG,IAAR;MACA,KAAKH,MAAL,GAAcA,MAAd;MACA,KAAKI,OAAL;IACD;;IACD,OAAO;MACLJ,MAAM,EAAE,KAAKA,MADR;MAELG,KAAK;IAFA,CAAP;EAID,CAtBS;;EAwBAR,6CAAV,UAA6BU,QAA7B,EAAqDC,IAArD,EAAuE;IACrE,IAAMC,SAAS,GAAGhB,MAAM,CAACc,QAAD,CAAxB;IACA,IAAMG,qBAAqB,GAAGhB,aAAa,CAACc,IAAD,CAA3C;IACA,IAAMG,iBAAiB,GAAGjB,aAAa,CAACe,SAAS,CAACD,IAAX,CAAvC;IACAL,YACEC,QADF,KACgB,YADhB,GAEEZ,UAAaiB,uBAAb,EAAkC,EAAlC,CAFF,GAEoCjB,mBAAsB,KAAtB,KAAsBgB,IAAtB,EAAsB,iEACnDE,qBAAqB,aAArB,GAAgCC,iBAAhC,GAAiD,oBADE,CAAtB,CAFpC;EAKD,CATS;;EAUZ;AAAC,CAvED","names":["equal","invariant","parser","operationName","options","context","OperationData","newOptions","storePrevious","previousOptions","isMounted","client","process","NODE_ENV","isNew","cleanup","document","type","operation","requiredOperationName","usedOperationName"],"sourceRoot":"","sources":["../../../src/react/data/OperationData.ts"],"sourcesContent":["import { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nimport { ApolloClient } from '../../core';\nimport { DocumentType, parser, operationName } from '../parser';\nimport { CommonOptions } from '../types/types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: any = {};\n  public client: ApolloClient<object> | undefined;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: any) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}