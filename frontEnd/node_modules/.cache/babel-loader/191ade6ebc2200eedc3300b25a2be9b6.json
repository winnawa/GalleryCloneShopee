{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport { DocumentType } from \"../parser/index.js\";\nimport { OperationData } from \"./OperationData.js\";\n\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n\n  function QueryData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        onNewData = _a.onNewData;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runLazy = false;\n    _this.previous = Object.create(null);\n\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n\n      _this.onNewData();\n    };\n\n    _this.getQueryResult = function () {\n      var result = _this.observableQueryFields();\n\n      var options = _this.getOptions();\n\n      if (options.skip) {\n        result = __assign(__assign({}, result), {\n          data: undefined,\n          error: undefined,\n          loading: false,\n          called: true\n        });\n      } else if (_this.currentObservable) {\n        var currentResult = _this.currentObservable.getCurrentResult();\n\n        var data = currentResult.data,\n            loading = currentResult.loading,\n            partial = currentResult.partial,\n            networkStatus = currentResult.networkStatus,\n            errors = currentResult.errors;\n        var error = currentResult.error;\n\n        if (errors && errors.length > 0) {\n          error = new ApolloError({\n            graphQLErrors: errors\n          });\n        }\n\n        result = __assign(__assign({}, result), {\n          data: data,\n          loading: loading,\n          networkStatus: networkStatus,\n          error: error,\n          called: true\n        });\n\n        if (loading) {} else if (error) {\n          Object.assign(result, {\n            data: (_this.currentObservable.getLastResult() || {}).data\n          });\n        } else {\n          var fetchPolicy = _this.currentObservable.options.fetchPolicy;\n          var partialRefetch = options.partialRefetch;\n\n          if (partialRefetch && partial && (!data || Object.keys(data).length === 0) && fetchPolicy !== 'cache-only') {\n            Object.assign(result, {\n              loading: true,\n              networkStatus: NetworkStatus.loading\n            });\n            result.refetch();\n            return result;\n          }\n        }\n      }\n\n      result.client = _this.client;\n\n      _this.setOptions(options, true);\n\n      var previousResult = _this.previous.result;\n      _this.previous.loading = previousResult && previousResult.loading || false;\n      result.previousData = previousResult && (previousResult.data || previousResult.previousData);\n      _this.previous.result = result;\n      _this.currentObservable && _this.currentObservable.resetQueryStoreErrors();\n      return result;\n    };\n\n    _this.obsRefetch = function (variables) {\n      var _a;\n\n      return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.refetch(variables);\n    };\n\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      return _this.currentObservable.fetchMore(fetchMoreOptions);\n    };\n\n    _this.obsUpdateQuery = function (mapFn) {\n      return _this.currentObservable.updateQuery(mapFn);\n    };\n\n    _this.obsStartPolling = function (pollInterval) {\n      var _a;\n\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.startPolling(pollInterval);\n    };\n\n    _this.obsStopPolling = function () {\n      var _a;\n\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.stopPolling();\n    };\n\n    _this.obsSubscribeToMore = function (options) {\n      return _this.currentObservable.subscribeToMore(options);\n    };\n\n    _this.onNewData = onNewData;\n    return _this;\n  }\n\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n\n    var _a = this.getOptions(),\n        skip = _a.skip,\n        query = _a.query;\n\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n\n  QueryData.prototype.fetchData = function () {\n    var _this = this;\n\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(function (resolve) {\n      return _this.startQuerySubscription(resolve);\n    });\n  };\n\n  QueryData.prototype.afterExecute = function (_a) {\n    var _b = (_a === void 0 ? {} : _a).lazy,\n        lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  };\n\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  };\n\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  };\n\n  QueryData.prototype.ssrInitiated = function () {\n    return this.context && this.context.renderPromises;\n  };\n\n  QueryData.prototype.getExecuteResult = function () {\n    var result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  ;\n\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var _a = this.getOptions(),\n        ssr = _a.ssr,\n        skip = _a.skip;\n\n    var ssrDisabled = ssr === false || skip;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    var ssrLoading = __assign({\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client\n    }, this.observableQueryFields());\n\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    var result;\n\n    if (this.ssrInitiated()) {\n      result = this.context.renderPromises.addQueryPromise(this, this.getQueryResult) || ssrLoading;\n    }\n\n    return result;\n  };\n\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n\n    if (this.ssrInitiated() && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context\n    });\n  };\n\n  QueryData.prototype.initializeObservableQuery = function () {\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n\n    if (!this.currentObservable) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previous.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: null\n      });\n      this.currentObservable = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n\n      if (this.ssrInitiated()) {\n        this.context.renderPromises.registerSSRObservable(this.currentObservable, observableQueryOptions);\n      }\n    }\n  };\n\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    if (this.getOptions().skip) return;\n\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: null\n    });\n\n    if (!equal(newObservableQueryOptions, this.previous.observableQueryOptions)) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.setOptions(newObservableQueryOptions).catch(function () {});\n    }\n  };\n\n  QueryData.prototype.startQuerySubscription = function (onNewData) {\n    var _this = this;\n\n    if (onNewData === void 0) {\n      onNewData = this.onNewData;\n    }\n\n    if (this.currentSubscription || this.getOptions().skip) return;\n    this.currentSubscription = this.currentObservable.subscribe({\n      next: function (_a) {\n        var loading = _a.loading,\n            networkStatus = _a.networkStatus,\n            data = _a.data;\n        var previousResult = _this.previous.result;\n\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: function (error) {\n        _this.resubscribeToQuery();\n\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n        var previousResult = _this.previous.result;\n\n        if (previousResult && previousResult.loading || !equal(error, _this.previous.error)) {\n          _this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var currentObservable = this.currentObservable;\n\n    if (currentObservable) {\n      var lastError = currentObservable.getLastError();\n      var lastResult = currentObservable.getLastResult();\n      currentObservable.resetLastResults();\n      this.startQuerySubscription();\n      Object.assign(currentObservable, {\n        lastError: lastError,\n        lastResult: lastResult\n      });\n    }\n  };\n\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    if (!this.currentObservable || !this.previous.result) return;\n    var _a = this.previous.result,\n        data = _a.data,\n        loading = _a.loading,\n        error = _a.error;\n\n    if (!loading) {\n      var _b = this.getOptions(),\n          query = _b.query,\n          variables = _b.variables,\n          onCompleted = _b.onCompleted,\n          onError = _b.onError,\n          skip = _b.skip;\n\n      if (this.previousOptions && !this.previous.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  };\n\n  QueryData.prototype.removeObservable = function (andDelete) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  };\n\n  QueryData.prototype.observableQueryFields = function () {\n    var _a;\n\n    return {\n      variables: (_a = this.currentObservable) === null || _a === void 0 ? void 0 : _a.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n\n  return QueryData;\n}(OperationData);\n\nexport { QueryData };","map":{"version":3,"mappings":"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","names":["equal","ApolloError","NetworkStatus","DocumentType","OperationData","__extends","_a","options","context","onNewData","_super","_this","Object","create","cleanup","runLazy","lazyOptions","result","observableQueryFields","getOptions","skip","data","undefined","error","loading","called","currentObservable","currentResult","getCurrentResult","partial","networkStatus","errors","length","graphQLErrors","assign","getLastResult","fetchPolicy","partialRefetch","keys","refetch","client","setOptions","previousResult","previous","previousData","resetQueryStoreErrors","variables","fetchMoreOptions","fetchMore","mapFn","updateQuery","pollInterval","startPolling","stopPolling","subscribeToMore","QueryData","refreshClient","query","removeQuerySubscription","removeObservable","updateObservableQuery","isMounted","startQuerySubscription","getExecuteSsrResult","getExecuteResult","runLazyQuery","ready","execute","ssr","Promise","resolve","_b","lazy","handleErrorOrCompleted","previousOptions","unmount","bind","call","__assign","renderPromises","getQueryResult","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","ssrInitiated","addQueryPromise","verifyDocumentType","Query","displayName","getSSRObservable","observableQueryOptions","prepareObservableQueryOptions","children","watchQuery","registerSSRObservable","initializeObservableQuery","newObservableQueryOptions","catch","currentSubscription","subscribe","next","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","resetLastResults","onCompleted","onError","unsubscribe","andDelete","obsRefetch","obsFetchMore","obsUpdateQuery","obsStartPolling","obsStopPolling","obsSubscribeToMore"],"sourceRoot":"","sources":["../../../src/react/data/QueryData.ts"],"sourcesContent":["import { equal } from '@wry/equality';\n\nimport { ApolloError } from '../../errors';\n\nimport {\n  ApolloClient,\n  NetworkStatus,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n  DocumentNode,\n  TypedDocumentNode\n} from '../../core';\n\nimport {\n  ObservableSubscription\n} from '../../utilities';\n\nimport { DocumentType } from '../parser';\nimport {\n  QueryResult,\n  QueryDataOptions,\n  QueryTuple,\n  QueryLazyOptions,\n  ObservableQueryFields,\n} from '../types/types';\nimport { OperationData } from './OperationData';\n\nexport class QueryData<TData, TVariables> extends OperationData {\n  public onNewData: () => void;\n  private currentObservable?: ObservableQuery<TData, TVariables>;\n  private currentSubscription?: ObservableSubscription;\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n  private previous: {\n    client?: ApolloClient<object>;\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    observableQueryOptions?: {};\n    result?: QueryResult<TData, TVariables>;\n    loading?: boolean;\n    options?: QueryDataOptions<TData, TVariables>;\n    error?: ApolloError;\n  } = Object.create(null);\n\n  constructor({\n    options,\n    context,\n    onNewData\n  }: {\n    options: QueryDataOptions<TData, TVariables>;\n    context: any;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (this.isMounted) this.startQuerySubscription();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined\n          }\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<void> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(resolve => this.startQuerySubscription(resolve));\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables\n      };\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteResult(): QueryResult<TData, TVariables> {\n    const result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  private getExecuteSsrResult() {\n    const { ssr, skip } = this.getOptions();\n    const ssrDisabled = ssr === false || skip;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    let result;\n    if (this.ssrInitiated()) {\n      result =\n        this.context.renderPromises!.addQueryPromise(\n          this,\n          this.getQueryResult\n        ) || ssrLoading;\n    }\n\n    return result;\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previous.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: null\n      };\n      this.currentObservable = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions\n      });\n\n      if (this.ssrInitiated()) {\n        this.context!.renderPromises!.registerSSRObservable(\n          this.currentObservable,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    if (this.getOptions().skip) return;\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: null\n    };\n\n    if (\n      !equal(\n        newObservableQueryOptions,\n        this.previous.observableQueryOptions\n      )\n    ) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  // Setup a subscription to watch for Apollo Client `ObservableQuery` changes.\n  // When new data is received, and it doesn't match the data that was used\n  // during the last `QueryData.execute` call (and ultimately the last query\n  // component render), trigger the `onNewData` callback. If not specified,\n  // `onNewData` will fallback to the default `QueryData.onNewData` function\n  // (which usually leads to a query component re-render).\n  private startQuerySubscription(onNewData: () => void = this.onNewData) {\n    if (this.currentSubscription || this.getOptions().skip) return;\n\n    this.currentSubscription = this.currentObservable!.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previous.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          equal(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previous.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !equal(error, this.previous.error)\n        ) {\n          this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const { currentObservable } = this;\n    if (currentObservable) {\n      const lastError = currentObservable.getLastError();\n      const lastResult = currentObservable.getLastResult();\n      currentObservable.resetLastResults();\n      this.startQuerySubscription();\n      Object.assign(currentObservable, {\n        lastError,\n        lastResult\n      });\n    }\n  }\n\n  private getQueryResult = (): QueryResult<TData, TVariables> => {\n    let result: any = this.observableQueryFields();\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate\n    // that previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client\n    // 4.0 to address this.\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true\n      };\n    } else if (this.currentObservable) {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.getCurrentResult();\n      const { data, loading, partial, networkStatus, errors } = currentResult;\n      let { error } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        data,\n        loading,\n        networkStatus,\n        error,\n        called: true\n      };\n\n      if (loading) {\n        // Fall through without modifying result...\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          partial &&\n          (!data || Object.keys(data).length === 0) &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n\n    result.client = this.client;\n    // Store options as this.previousOptions.\n    this.setOptions(options, true);\n\n    const previousResult = this.previous.result;\n\n    this.previous.loading =\n      previousResult && previousResult.loading || false;\n\n    // Ensure the returned result contains previousData as a separate\n    // property, to give developers the flexibility of leveraging outdated\n    // data while new data is loading from the network. Falling back to\n    // previousResult.previousData when previousResult.data is falsy here\n    // allows result.previousData to persist across multiple results.\n    result.previousData = previousResult &&\n      (previousResult.data || previousResult.previousData);\n\n    this.previous.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    if (!this.currentObservable || !this.previous.result) return;\n\n    const { data, loading, error } = this.previous.result;\n\n    if (!loading) {\n      const {\n        query,\n        variables,\n        onCompleted,\n        onError,\n        skip\n      } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previous.loading &&\n        equal(this.previousOptions.query, query) &&\n        equal(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  }\n\n  private removeObservable(andDelete: boolean) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  }\n\n  private obsRefetch = (variables?: Partial<TVariables>) =>\n    this.currentObservable?.refetch(variables);\n\n  private obsFetchMore = <K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K, TData> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable!.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable!.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable?.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable?.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable!.subscribeToMore(options);\n\n  private observableQueryFields() {\n    return {\n      variables: this.currentObservable?.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}