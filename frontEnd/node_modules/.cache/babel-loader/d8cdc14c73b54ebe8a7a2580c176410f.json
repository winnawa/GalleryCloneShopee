{"ast":null,"code":"import { wrap } from 'optimism';\nimport { getFragmentQueryDocument } from \"../../utilities/index.js\";\n\nvar ApolloCache = function () {\n  function ApolloCache() {\n    this.getFragmentDoc = wrap(getFragmentQueryDocument);\n  }\n\n  ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n    this.performTransaction(transaction, optimisticId);\n  };\n\n  ApolloCache.prototype.transformDocument = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.identify = function (object) {\n    return;\n  };\n\n  ApolloCache.prototype.gc = function () {\n    return [];\n  };\n\n  ApolloCache.prototype.modify = function (options) {\n    return false;\n  };\n\n  ApolloCache.prototype.transformForLink = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n\n    return this.read({\n      rootId: options.id || 'ROOT_QUERY',\n      query: options.query,\n      variables: options.variables,\n      returnPartialData: options.returnPartialData,\n      optimistic: optimistic\n    });\n  };\n\n  ApolloCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n\n    return this.read({\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      variables: options.variables,\n      rootId: options.id,\n      returnPartialData: options.returnPartialData,\n      optimistic: optimistic\n    });\n  };\n\n  ApolloCache.prototype.writeQuery = function (options) {\n    return this.write({\n      dataId: options.id || 'ROOT_QUERY',\n      result: options.data,\n      query: options.query,\n      variables: options.variables,\n      broadcast: options.broadcast\n    });\n  };\n\n  ApolloCache.prototype.writeFragment = function (options) {\n    return this.write({\n      dataId: options.id,\n      result: options.data,\n      variables: options.variables,\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      broadcast: options.broadcast\n    });\n  };\n\n  return ApolloCache;\n}();\n\nexport { ApolloCache };","map":{"version":3,"mappings":"AACA,SAASA,IAAT,QAAqB,UAArB;AAEA,SAGEC,wBAHF,QAIO,0BAJP;;AAUA;EAAA;IA2GU,sBAAiBD,IAAI,CAACC,wBAAD,CAArB;EAsCT;;EA1FQC,oDAAP,UACEC,WADF,EAEEC,YAFF,EAEsB;IAEpB,KAAKC,kBAAL,CAAwBF,WAAxB,EAAqCC,YAArC;EACD,CALM;;EASAF,0CAAP,UAAyBI,QAAzB,EAA+C;IAC7C,OAAOA,QAAP;EACD,CAFM;;EAIAJ,iCAAP,UAAgBK,MAAhB,EAA+C;IAC7C;EACD,CAFM;;EAIAL,2BAAP;IACE,OAAO,EAAP;EACD,CAFM;;EAIAA,+BAAP,UAAcM,OAAd,EAA0C;IACxC,OAAO,KAAP;EACD,CAFM;;EAMAN,yCAAP,UAAwBI,QAAxB,EAA8C;IAC5C,OAAOA,QAAP;EACD,CAFM;;EAUAJ,kCAAP,UACEM,OADF,EAEEC,UAFF,EAEmC;IAAjC;MAAAA,cAAc,CAACD,OAAO,CAACC,UAAvB;IAAiC;;IAEjC,OAAO,KAAKC,IAAL,CAAU;MACfC,MAAM,EAAEH,OAAO,CAACI,EAAR,IAAc,YADP;MAEfC,KAAK,EAAEL,OAAO,CAACK,KAFA;MAGfC,SAAS,EAAEN,OAAO,CAACM,SAHJ;MAIfC,iBAAiB,EAAEP,OAAO,CAACO,iBAJZ;MAKfN,UAAU;IALK,CAAV,CAAP;EAOD,CAXM;;EAiBAP,qCAAP,UACEM,OADF,EAEEC,UAFF,EAEmC;IAAjC;MAAAA,cAAc,CAACD,OAAO,CAACC,UAAvB;IAAiC;;IAEjC,OAAO,KAAKC,IAAL,CAAU;MACfG,KAAK,EAAE,KAAKG,cAAL,CAAoBR,OAAO,CAACS,QAA5B,EAAsCT,OAAO,CAACU,YAA9C,CADQ;MAEfJ,SAAS,EAAEN,OAAO,CAACM,SAFJ;MAGfH,MAAM,EAAEH,OAAO,CAACI,EAHD;MAIfG,iBAAiB,EAAEP,OAAO,CAACO,iBAJZ;MAKfN,UAAU;IALK,CAAV,CAAP;EAOD,CAXM;;EAaAP,mCAAP,UACEM,OADF,EACqD;IAEnD,OAAO,KAAKW,KAAL,CAAW;MAChBC,MAAM,EAAEZ,OAAO,CAACI,EAAR,IAAc,YADN;MAEhBS,MAAM,EAAEb,OAAO,CAACc,IAFA;MAGhBT,KAAK,EAAEL,OAAO,CAACK,KAHC;MAIhBC,SAAS,EAAEN,OAAO,CAACM,SAJH;MAKhBS,SAAS,EAAEf,OAAO,CAACe;IALH,CAAX,CAAP;EAOD,CAVM;;EAYArB,sCAAP,UACEM,OADF,EACwD;IAEtD,OAAO,KAAKW,KAAL,CAAW;MAChBC,MAAM,EAAEZ,OAAO,CAACI,EADA;MAEhBS,MAAM,EAAEb,OAAO,CAACc,IAFA;MAGhBR,SAAS,EAAEN,OAAO,CAACM,SAHH;MAIhBD,KAAK,EAAE,KAAKG,cAAL,CAAoBR,OAAO,CAACS,QAA5B,EAAsCT,OAAO,CAACU,YAA9C,CAJS;MAKhBK,SAAS,EAAEf,OAAO,CAACe;IALH,CAAX,CAAP;EAOD,CAVM;;EAWT;AAAC,CAjJD","names":["wrap","getFragmentQueryDocument","ApolloCache","transaction","optimisticId","performTransaction","document","object","options","optimistic","read","rootId","id","query","variables","returnPartialData","getFragmentDoc","fragment","fragmentName","write","dataId","result","data","broadcast"],"sourceRoot":"","sources":["../../../src/cache/core/cache.ts"],"sourcesContent":["import { DocumentNode } from 'graphql';\nimport { wrap } from 'optimism';\n\nimport {\n  StoreObject,\n  Reference,\n  getFragmentQueryDocument,\n} from '../../utilities';\nimport { DataProxy } from './types/DataProxy';\nimport { Cache } from './types/Cache';\n\nexport type Transaction<T> = (c: ApolloCache<T>) => void;\n\nexport abstract class ApolloCache<TSerialized> implements DataProxy {\n  // required to implement\n  // core API\n  public abstract read<T, TVariables = any>(\n    query: Cache.ReadOptions<TVariables, T>,\n  ): T | null;\n  public abstract write<TResult = any, TVariables = any>(\n    write: Cache.WriteOptions<TResult, TVariables>,\n  ): Reference | undefined;\n  public abstract diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T>;\n  public abstract watch(watch: Cache.WatchOptions): () => void;\n  public abstract reset(): Promise<void>;\n\n  // Remove whole objects from the cache by passing just options.id, or\n  // specific fields by passing options.field and/or options.args. If no\n  // options.args are provided, all fields matching options.field (even\n  // those with arguments) will be removed. Returns true iff any data was\n  // removed from the cache.\n  public abstract evict(options: Cache.EvictOptions): boolean;\n\n  // intializer / offline / ssr API\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public abstract restore(\n    serializedState: TSerialized,\n  ): ApolloCache<TSerialized>;\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public abstract extract(optimistic?: boolean): TSerialized;\n\n  // Optimistic API\n\n  public abstract removeOptimistic(id: string): void;\n\n  // Transactional API\n\n  public abstract performTransaction(\n    transaction: Transaction<TSerialized>,\n    // Although subclasses may implement recordOptimisticTransaction\n    // however they choose, the default implementation simply calls\n    // performTransaction with a string as the second argument, allowing\n    // performTransaction to handle both optimistic and non-optimistic\n    // (broadcast-batching) transactions. Passing null for optimisticId is\n    // also allowed, and indicates that performTransaction should apply\n    // the transaction non-optimistically (ignoring optimistic data).\n    optimisticId?: string | null,\n  ): void;\n\n  public recordOptimisticTransaction(\n    transaction: Transaction<TSerialized>,\n    optimisticId: string,\n  ) {\n    this.performTransaction(transaction, optimisticId);\n  }\n\n  // Optional API\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  public identify(object: StoreObject | Reference): string | undefined {\n    return;\n  }\n\n  public gc(): string[] {\n    return [];\n  }\n\n  public modify(options: Cache.ModifyOptions): boolean {\n    return false;\n  }\n\n  // Experimental API\n\n  public transformForLink(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  // DataProxy API\n  /**\n   *\n   * @param options\n   * @param optimistic\n   */\n  public readQuery<QueryType, TVariables = any>(\n    options: Cache.ReadQueryOptions<QueryType, TVariables>,\n    optimistic = !!options.optimistic,\n  ): QueryType | null {\n    return this.read({\n      rootId: options.id || 'ROOT_QUERY',\n      query: options.query,\n      variables: options.variables,\n      returnPartialData: options.returnPartialData,\n      optimistic,\n    });\n  }\n\n  // Make sure we compute the same (===) fragment query document every\n  // time we receive the same fragment in readFragment.\n  private getFragmentDoc = wrap(getFragmentQueryDocument);\n\n  public readFragment<FragmentType, TVariables = any>(\n    options: Cache.ReadFragmentOptions<FragmentType, TVariables>,\n    optimistic = !!options.optimistic,\n  ): FragmentType | null {\n    return this.read({\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      variables: options.variables,\n      rootId: options.id,\n      returnPartialData: options.returnPartialData,\n      optimistic,\n    });\n  }\n\n  public writeQuery<TData = any, TVariables = any>(\n    options: Cache.WriteQueryOptions<TData, TVariables>,\n  ): Reference | undefined {\n    return this.write({\n      dataId: options.id || 'ROOT_QUERY',\n      result: options.data,\n      query: options.query,\n      variables: options.variables,\n      broadcast: options.broadcast,\n    });\n  }\n\n  public writeFragment<TData = any, TVariables = any>(\n    options: Cache.WriteFragmentOptions<TData, TVariables>,\n  ): Reference | undefined {\n    return this.write({\n      dataId: options.id,\n      result: options.data,\n      variables: options.variables,\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      broadcast: options.broadcast,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}