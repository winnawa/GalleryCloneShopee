{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useContext, useEffect, useReducer, useRef } from 'react';\nimport { QueryData } from \"../../data/index.js\";\nimport { useDeepMemo } from \"./useDeepMemo.js\";\nimport { getApolloContext } from \"../../context/index.js\";\nexport function useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n\n  var context = useContext(getApolloContext());\n\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      tick = _a[0],\n      forceUpdate = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n  var queryData = queryDataRef.current || new QueryData({\n    options: updatedOptions,\n    context: context,\n    onNewData: function () {\n      if (!queryData.ssrInitiated()) {\n        Promise.resolve().then(forceUpdate);\n      } else {\n        forceUpdate();\n      }\n    }\n  });\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  var memo = {\n    options: __assign(__assign({}, updatedOptions), {\n      onError: undefined,\n      onCompleted: undefined\n    }),\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  var queryResult = lazy ? result[1] : result;\n  useEffect(function () {\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return function () {\n      return queryData.cleanup();\n    };\n  }, []);\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data]);\n  return result;\n}","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,UAAhC,EAA4CC,MAA5C,QAA0D,OAA1D;AAUA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,SAASC,gBAAT,QAAiC,wBAAjC;AAEA,OAAM,SAAUC,YAAV,CACJC,KADI,EAEJC,OAFI,EAGJC,IAHI,EAGQ;EAAZ;IAAAA;EAAY;;EAEZ,IAAMC,OAAO,GAAGX,UAAU,CAACM,gBAAgB,EAAjB,CAA1B;;EACM,SAAsBJ,UAAU,CAAC,aAAC;IAAI,QAAC,GAAG,CAAJ;EAAK,CAAX,EAAa,CAAb,CAAhC;EAAA,IAACU,IAAI,QAAL;EAAA,IAAOC,WAAW,QAAlB;;EACN,IAAMC,cAAc,GAAGL,OAAO,GAAEM,sBAAMN,OAAN,GAAa;IAAED,KAAK;EAAP,CAAb,CAAF,GAA2B;IAAEA,KAAK;EAAP,CAAzD;EAEA,IAAMQ,YAAY,GAAGb,MAAM,EAA3B;EACA,IAAMc,SAAS,GACbD,YAAY,CAACE,OAAb,IACA,IAAId,SAAJ,CAAiC;IAC/BK,OAAO,EAAEK,cADsB;IAE/BH,OAAO,SAFwB;IAG/BQ,SAAS;MACP,IAAI,CAACF,SAAS,CAACG,YAAV,EAAL,EAA+B;QAK7BC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuBV,WAAvB;MACD,CAND,MAMO;QAGLA,WAAW;MACZ;IACF;EAf8B,CAAjC,CAFF;EAoBAI,SAAS,CAACO,UAAV,CAAqBV,cAArB;EACAG,SAAS,CAACN,OAAV,GAAoBA,OAApB;;EAKA,IAAIM,SAAS,CAACG,YAAV,MAA4B,CAACJ,YAAY,CAACE,OAA9C,EAAuD;IACrDF,YAAY,CAACE,OAAb,GAAuBD,SAAvB;EACD;;EAKD,IAAMQ,IAAI,GAAG;IACXhB,OAAO,EAAEM,sBACJD,cADI,GACU;MACjBY,OAAO,EAAEC,SADQ;MAEjBC,WAAW,EAAED;IAFI,CADV,CADE;IAMXhB,OAAO,SANI;IAOXC,IAAI;EAPO,CAAb;EAUA,IAAMiB,MAAM,GAAGxB,WAAW,CACxB;IAAM,OAACK,IAAI,GAAGO,SAAS,CAACa,WAAV,EAAH,GAA6Bb,SAAS,CAACc,OAAV,EAAlC;EAAsD,CADpC,EAExBN,IAFwB,CAA1B;EAKA,IAAMO,WAAW,GAAGtB,IAAI,GACnBmB,MAAwC,CAAC,CAAD,CADrB,GAEnBA,MAFL;EAIA5B,SAAS,CAAC;IAGR,IAAI,CAACe,YAAY,CAACE,OAAlB,EAA2B;MACzBF,YAAY,CAACE,OAAb,GAAuBD,SAAvB;IACD;;IAED,OAAO;MAAM,gBAAS,CAACgB,OAAV;IAAmB,CAAhC;EACD,CARQ,EAQN,EARM,CAAT;EAUAhC,SAAS,CAAC;IAAM,gBAAS,CAACiC,YAAV,CAAuB;MAAExB,IAAI;IAAN,CAAvB;EAAgC,CAAvC,EAAyC,CAChDsB,WAAW,CAACG,OADoC,EAEhDH,WAAW,CAACI,aAFoC,EAGhDJ,WAAW,CAACK,KAHoC,EAIhDL,WAAW,CAACM,IAJoC,CAAzC,CAAT;EAOA,OAAOT,MAAP;AACD","names":["useContext","useEffect","useReducer","useRef","QueryData","useDeepMemo","getApolloContext","useBaseQuery","query","options","lazy","context","tick","forceUpdate","updatedOptions","__assign","queryDataRef","queryData","current","onNewData","ssrInitiated","Promise","resolve","then","setOptions","memo","onError","undefined","onCompleted","result","executeLazy","execute","queryResult","cleanup","afterExecute","loading","networkStatus","error","data"],"sourceRoot":"","sources":["../../../../src/react/hooks/utils/useBaseQuery.ts"],"sourcesContent":["import { useContext, useEffect, useReducer, useRef } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport {\n  QueryHookOptions,\n  QueryDataOptions,\n  QueryTuple,\n  QueryResult,\n} from '../../types/types';\nimport { QueryData } from '../../data';\nimport { useDeepMemo } from './useDeepMemo';\nimport { OperationVariables } from '../../../core';\nimport { getApolloContext } from '../../context';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer(x => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData =\n    queryDataRef.current ||\n    new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryDataOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask.\n          Promise.resolve().then(forceUpdate);\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      }\n    });\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // SSR won't trigger the effect hook below that stores the current\n  // `QueryData` instance for future renders, so we'll handle that here if\n  // the current render is happening on the server side.\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: {\n      ...updatedOptions,\n      onError: undefined,\n      onCompleted: undefined\n    } as QueryHookOptions<TData, TVariables>,\n    context,\n    tick\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  useEffect(() => {\n    // We only need one instance of the `QueryData` class, so we'll store it\n    // as a ref to make it available on subsequent renders.\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return () => queryData.cleanup();\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n  ]);\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}